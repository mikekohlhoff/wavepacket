! nStates : number of states to run calculations for
! TEST: .TRUE. stops calculation after initial diagonalisation, use this option if you want to find the state number first!
!       .FALSE. diagonalises and the propagates the wf      
! MEANFIELD: .TRUE. for meanfield calc, .FALSE. for constant velocity calc
! MPLOT: output wavefunction for plotting? (note: output files can get big! don't just plot out wf willy nilly!)
! placeholder \dollarsign{x}for template in forloop.py has to be adopted to intended scan

&CONTROL
nStates = 1,
!test for finding right state number
TEST = .FALSE.,
!one time run for wf check
TESTWF = .FALSE.,
MEANFIELD = .FALSE.,
MPLOT = .TRUE.
/

! ni : principal quantum number of interest
! n0 : array indeces of states of interest; determined by TEST=.TRUE. above.
!      the first state for n=ni is at Sum_1^(ni-1) I think
! k0 : k-state quantum numbers of interest

&STATE
ni = 5,
n0 = 11,
k0 = -4
/

! field : electric field to extract ions
! v0 : initial velocity of particle (at starting distance)

&ENVIRONMENT
field = 0.d0
v0 = ${v}
! initial distance to start propagation (where the initial diagonalisation is carried out) scaled in settings file
! 'standard' for former calculations 6n^2
dist0 = 6.d0
/

! CWDVR parameters (the propagation grid)
! nt : no. of cwdvr angular points, can be greater than ntb if desired
! dk : coulomb wave parameter: inc. dk-> 1.more points, 2.smaller sep further out, 3.more even distribution at larger dist
! z : inc. z-> smaller the first grid point, not much effect
! initial diagonalisation grid parameters (regularised Laguerre)
! b : RADIAL scaling parameter, spacing for zeroes
! nrb : no. of RADIAL points for initial diagonalisation
! ntb : no. of angular points for initial diagonalisation

&GRID
nt = 40
dk = 3.0d0
z = 50.d0

b = 0.4d0
nrb = 60
ntb = 60
/
